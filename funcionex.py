import math

#These functions were made by me. Also I included functions generated by chatgpt in green. 

def softmax(*args):
  #returns the soft arg max vector for a given input. The name "softmax" is misleading;
  #is rather a smooth approximation to the arg max function: the function whose value is which index has the maximum.

  inputs=list(args) # a list of the args
  exp_inputs = [math.exp(i) for i in inputs] #a vector of the inputs as an exponent of exp() function
  outputs=[i / sum(exp_inputs) for i in exp_inputs] #the output of softmax

  return outputs


def argmax(*args):
  #ARG MAX FUNCTION:
  # returns a one hot vector which represent the max arg of the input
  # if there are more than one max value, the function will divide each one by the number of max values.

  inputs=list(args) # a list of the args
  exp_inputs = [math.exp(i) for i in inputs] #a vector of the inputs as an exponent of exp() function
  outputs=[i / sum(exp_inputs) for i in exp_inputs] #the output of softmax
  max_num= max(outputs) 
  n_max = sum(1 for i in outputs if i == max_num)
  hot_outputs = [1/n_max if i == max_num else 0 for i in outputs] #the one hot vector of the max of the output
  
  return hot_outputs

def primos(n):
  #Returns all the prime numbers until n

  for r in range(2,n+1):
    if (r%2 == 0 and r!=2) or (r%3==0 and r!=3) or (r%5 == 0 and r!=5) or (r%7==0 and r!=7):
      continue
    else:
      print(r)

#This function to find prime numbers is 100 TIMES FASTER and was made for chatgpt:
"""def sieve_of_eratosthenes(n):
    is_prime = [True] * (n + 1)
    is_prime[0] = is_prime[1] = False

    p = 2
    while p * p <= n:
        if is_prime[p]:
            for i in range(p * p, n + 1, p):
                is_prime[i] = False
        p += 1

    primes = []
    for i in range(2, n + 1):
        if is_prime[i]:
            primes.append(i)

    return primes

n = 10000
primes = sieve_of_eratosthenes(n)
print(primes)"""